generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  firstname          String?
  lastname           String?
  email              String    @unique
  password           String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  roleId             Int
  role               Role      @relation(fields: [roleId], references: [id])
  startdate          DateTime?
  enddate            DateTime?
  status             String?   @default("active")
  passwordresetlink  String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  subscriptions      Subscriptions[]  // Relation to Subscriptions
  businessDetails    ProBusinessDetails?
  @@map("User")  // Map to actual table name
}


model Subscriptions {
  SubscriptionID        Int       @id @default(autoincrement())
  userId                Int       // Foreign key to User
  StripeSubscriptionID  String    @db.VarChar(255)
  PlanName              String    @db.VarChar(100)
  PlanType              String    @db.VarChar(50)
  Amount                Decimal   @db.Decimal(10, 2)   // MySQL uses DECIMAL
  Currency              String    @default("USD") @db.VarChar(10)
  StartDate             DateTime  @default(now())
  EndDate               DateTime?
  RenewalPeriod         Int?
  Status                String    @default("active") @db.VarChar(50)
  CreatedAt             DateTime  @default(now())
  UpdatedAt             DateTime  @updatedAt

  // Relation to Users table
  user                  User      @relation(fields: [userId], references: [id])

  @@map("Subscriptions")  // Map to your MySQL table name (if existing)
}




model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  users       User[]
  permissions Permission[]
}

model Module {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  permissions Permission[]
}

model Permission {
  id        Int     @id @default(autoincrement())
  roleId    Int
  moduleId  Int
  role      Role    @relation(fields: [roleId], references: [id])
  module    Module  @relation(fields: [moduleId], references: [id])
  canCreate Boolean @default(false)
  canRead   Boolean @default(true)
  canUpdate Boolean @default(false)
  canDelete Boolean @default(false)
}


model RoofingRequest {
  id                       Int              @id @default(autoincrement())
  fullName                 String?
  phoneNumber              String?
  emailAddress             String?
  preferredContactMethod   String?
  preferredCallingTime     String?
  projectTitle             String?
  projectAddress           String?
  projectDetails           String?
  productType              String?
  productColor             String?
  productPreference        String?
  workDescription          String?
  createdAt                DateTime         @default(now())
  files                    ProjectFile[]    // Relation to files
}

model ProjectFile {
  id                Int              @id @default(autoincrement())
  fileType          String           // e.g., "drawing", "insurance", "projectOther", "media"
  originalName      String           // original uploaded name
  fileUrl           String
  projectRequestId  Int
  RoofingRequest    RoofingRequest   @relation(fields: [projectRequestId], references: [id], onDelete: Cascade)
  uploadedAt        DateTime         @default(now())
}











model TempUser {
  id           Int      @id @default(autoincrement())
  firstname    String?
  lastname     String?
  emailaddress String   @unique
  otp          String?
  address      String?
  city         String?
  state        String?
  zipCode      String? 
  paymentintentid String?
  startdate    DateTime?
  enddate      DateTime?
  status       String?
  password     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model ProBusinessDetails {
  id                 Int       @id @default(autoincrement())
  userId             Int       @unique
  user               User      @relation(fields: [userId], references: [id])

  companyName        String?
  companyPhone       String?
  companyEmail       String?
  streetAddress      String?
  city               String?
  state              String ?    
  zip                String?
  ein                String?

  ownerFirstName     String?
  ownerLastName      String?
  ownerEmail         String?

  services           String     @db.Text    // <-- change to Text
  qualifications     String     @db.Text    // <-- change to Text
  companyLogo        String?    @db.Text    // <-- change to Text (file path can be long)
  ownerLicense       String?    @db.Text    // (future file)
  

  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}



model Cms {
     CmsID        Int    @id @default(autoincrement())
     CmsPageName  String @unique
     CmsText      String?
   }




   model Project {
  id                 Int                 @id @default(autoincrement())
  fullName           String?
  phoneNumber        String?
  emailAddress       String?
  projectTitle       String?
  projectAddress     String?
  projectDetails     String?
  productType        String?
  productColor       String?
  productPreference  String?
  workDescription    String?
  budget             Float?
  status             Int                 @default(0)  // 0 = Pending, 1 = Approved, etc.
  prosId             String?  
  projectid          String?     
  propertyType       String?
  startdate          String?
  enddate            String? 
  createdAt          DateTime            @default(now())
  documents          ProjectDocument[]   
  bids               Bid[] 
}



model ProjectDocument {
  id           Int       @id @default(autoincrement())
  fileType     String    
  originalName String
  fileUrl      String
  projectId    Int
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedAt   DateTime  @default(now())
}


model Bid {
  id          Int       @id @default(autoincrement())
  amount      Float
  message     String?
  status      Int       @default(0) 
  createdAt   DateTime  @default(now())

  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int

  proId       Int?       
}



