generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  firstname          String?
  lastname           String?
  email              String    @unique
  password           String?
  address            String?
  city               String?
  state              String?
  zipCode            String?
  roleId             Int
  role               Role      @relation(fields: [roleId], references: [id])
  startdate          DateTime?
  enddate            DateTime?
  status             String?   @default("active")
  passwordresetlink  String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  subscriptions      Subscriptions[]  // Relation to Subscriptions
  businessDetails    ProBusinessDetails?
  @@map("User")  // Map to actual table name
}


model Subscriptions {
  SubscriptionID        Int       @id @default(autoincrement())
  userId                Int       // Foreign key to User
  StripeSubscriptionID  String    @db.VarChar(255)
  PlanName              String    @db.VarChar(100)
  PlanType              String    @db.VarChar(50)
  Amount                Decimal   @db.Decimal(10, 2)   // MySQL uses DECIMAL
  Currency              String    @default("USD") @db.VarChar(10)
  StartDate             DateTime  @default(now())
  EndDate               DateTime?
  RenewalPeriod         Int?
  Status                String    @default("active") @db.VarChar(50)
  CreatedAt             DateTime  @default(now())
  UpdatedAt             DateTime  @updatedAt

  // Relation to Users table
  user                  User      @relation(fields: [userId], references: [id])

  @@map("Subscriptions")  // Map to your MySQL table name (if existing)
}




model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  users       User[]
  permissions Permission[]
}

model Module {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  permissions Permission[]
}

model Permission {
  id        Int     @id @default(autoincrement())
  roleId    Int
  moduleId  Int
  role      Role    @relation(fields: [roleId], references: [id])
  module    Module  @relation(fields: [moduleId], references: [id])
  canCreate Boolean @default(false)
  canRead   Boolean @default(true)
  canUpdate Boolean @default(false)
  canDelete Boolean @default(false)
}


model RoofingRequest {
  id                Int       @id @default(autoincrement())
  fullName          String?
  phone             String?
  email             String?
  preferredContact  String?   // "Call" | "Email" | "SMS"
  
  propertyType      String?   // "Residential" | "Commercial" | "Industrial"
  address           String?
  city              String?
  state             String?
  zipCode           String?
  propertySize      String?   // Sq. ft (optional)
  buildingAge       Int?      // Age in years (optional)
  
  serviceNeeded     String?    // "Installation" | "Replacement" | "Repair" | "Inspection"
  roofType          String?   // "Asphalt" | "Metal" | "Tile" | "Flat" | "Other"
  problemDescription String?  // User's description of the issue
  
  urgency           String?   // "ASAP" | "Within a Month" | "Just Exploring"
  estimatedBudget   String?   // "Under 5k" | "5k-10k" | "10k+"
  preferredStartDate DateTime?

  photoUrls         String[]  // Array of image URLs (if uploaded)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}


model TempUser {
  id           Int      @id @default(autoincrement())
  firstname    String?
  lastname     String?
  emailaddress String   @unique
  otp          String?
  address      String?
  city         String?
  state        String?
  zipCode      String? 
  paymentintentid String?
  startdate    DateTime?
  enddate      DateTime?
  status       String?
  password     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model ProBusinessDetails {
  id                 Int       @id @default(autoincrement())
  userId             Int       @unique
  user               User      @relation(fields: [userId], references: [id])

  companyName        String?
  companyPhone       String?
  companyEmail       String?
  streetAddress      String?
  city               String?
  state              String ?    
  zip                String?
  ein                String?

  ownerFirstName     String?
  ownerLastName      String?
  ownerEmail         String?

  services           String     @db.Text    // <-- change to Text
  qualifications     String     @db.Text    // <-- change to Text
  companyLogo        String?    @db.Text    // <-- change to Text (file path can be long)
  ownerLicense       String?    @db.Text    // (future file)
  

  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}
